<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dev Log</title><link>https://seoah-lab.github.io/docs/java/basic/</link><description>Recent content on Dev Log</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://seoah-lab.github.io/docs/java/basic/index.xml" rel="self" type="application/rss+xml"/><item><title>Java Map to Iterate</title><link>https://seoah-lab.github.io/docs/java/basic/java_map_iterate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seoah-lab.github.io/docs/java/basic/java_map_iterate/</guid><description>Java Map to Iterate # HashMap 의 key 와 value를 확인할때 활용할 수 있는 방법은 다음과 같다.
import java.util.Map; import java.util.HashMap; class Iteration { public static void main(String[] arg) { Map&amp;lt;String,Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); // enter name/url pair map.put(&amp;#34;sogmy&amp;#34;, 1); map.put(&amp;#34;hyunjin&amp;#34;, 2); map.put(&amp;#34;suji&amp;#34;, 3); map.put(&amp;#34;young&amp;#34;, 4); map.put(&amp;#34;ki&amp;#34;, 5); Iterator&amp;lt;Map.Entry&amp;lt;String, Interger&amp;gt;&amp;gt; itr = map.entrySet().iterator(); while(itr.hasNext()) { Map.Entry&amp;lt;String, Interger&amp;gt; entry = itr.next(); System.out.println(&amp;#34;Key = &amp;#34; + entry.getKey() + &amp;#34;, Value = &amp;#34; + entry.</description></item><item><title>Java String Method</title><link>https://seoah-lab.github.io/docs/java/basic/java_string_method/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seoah-lab.github.io/docs/java/basic/java_string_method/</guid><description>Java String Method # String.charAt(int index)
지정된 인덱스의 char 값을 반환합니다. String.indexOf(String str)
String.indexOf(int ch)
문자열 내에서 지정된 부분 문자열이 처음 나타나는 인덱스를 반환합니다. String.lastIndexOf​(String str)
String.lastIndexOf​(int ch)
문자열 내에서 지정된 문자의 마지막 발생 인덱스를 반환합니다. String.length()
문자열의 길이를 반환합니다. String.contains()
String.toCharArray()
String.replace()
String.replaceAll​(String regex, String replacement)
주어진 정규식과 일치하는이 문자열의 각 하위 문자열을 주어진 대체로 바꿉니다. String.toLowCase()
String.toUpperCase()
String.substring​(int beginIndex)
String.substring​(int beginIndex, int endIndex)
문자열의 인덱스의 문자를 반환 합니다.</description></item><item><title>Primitive type, Reference type</title><link>https://seoah-lab.github.io/docs/java/basic/javatype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seoah-lab.github.io/docs/java/basic/javatype/</guid><description>Primitive type, Reference type # 1. 기본형 (Primitive) # Primitive type은 논리형, 문자형, 정수형, 실수형으로 구분된다. blooean, byte, short, int, long , float, duble, char 8가지 이다. null 이 존재하지 않는다. waper class 가 존재한다. Stack 메모리에 저장된다. 컴파일 시점에 메모리의 크기를 초과하면 에러가 발생한다. (stack over flow) 2. 참조형 (Reference type) # 기본형 타입을 제외한 타입들이 모두 참조형 타입(Reference type)이다. java.lang.Object 상속 null 이 존재하며 어떤 객체 주소도 저장되어 있지 않음을 의미한다.</description></item><item><title/><link>https://seoah-lab.github.io/docs/java/basic/java_convert_interger_list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seoah-lab.github.io/docs/java/basic/java_convert_interger_list/</guid><description>Convert Integer List to Int Array in Java # List 의 toArray() 메서드는 Object 타입을 지원한다. 즉 int[] 배열은 지원하지 않는다.
ArrayList toArray() # public Object[] toArray() or public &amp;lt;T&amp;gt; T[] toArray(T[] a) import java.io.*; import java.util.List; import java.util.ArrayList; class Main { public static void main(String[] args) { List&amp;lt;Integer&amp;gt; al = new ArrayList&amp;lt;Integer&amp;gt;(); al.add(10); al.add(20); al.add(30); al.add(40); Object[] objects = al.toArray(); // Printing array of objects for (Object obj : objects) System.</description></item><item><title/><link>https://seoah-lab.github.io/docs/java/basic/java_math/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seoah-lab.github.io/docs/java/basic/java_math/</guid><description> Java Math # 제곱 구하기 static double pow​(double a, double b)
double pow = Math.pow(2,2); 큰 수, 작은 수 static int min(int a , int b)
static double min(double a , double b)
static float min(float a , float b)
static long min(long a , long b)
int max = Math.max(2,3); int min = Math.min(2,3);</description></item><item><title>Java Character Converter</title><link>https://seoah-lab.github.io/docs/java/basic/java_charter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seoah-lab.github.io/docs/java/basic/java_charter/</guid><description> Java Character Converter # char to int # char c = &amp;#39;1&amp;#39;; int num = Character.getNumbericValue(c); int to char # int a = 65; char c = (char)a; char to String # char c = &amp;#34;C&amp;#34;; String s = String.ValueOf(c); String to char # String s = &amp;#34;hello&amp;#34;; char c = s.charAt(0); //returns h</description></item><item><title>Java Map Sort by key and value</title><link>https://seoah-lab.github.io/docs/java/basic/java_map_sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seoah-lab.github.io/docs/java/basic/java_map_sort/</guid><description>Java Map Sort by key and value # Map to List 를 활용 # import java.util.ArrayList; import java.util.Comparator; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.Map.Entry; import java.util.stream.Collectors; String[] array = new String[]{&amp;#34;sun&amp;#34;, &amp;#34;bed&amp;#34;, &amp;#34;car&amp;#34;}; Map&amp;lt;Integer, String&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); map.put(2, array[2]); map.put(0, array[0]); map.put(1, array[1]); // key sort List&amp;lt;Integer&amp;gt; keyList = new ArrayList&amp;lt;&amp;gt;(map.keySet()); keyList.sort(Comparator.naturalOrder()); // 오름 차순 for (Integer key : keyList) { System.out.println(&amp;#34;Key: &amp;#34; + key); } keyList.</description></item><item><title>javax @Valid</title><link>https://seoah-lab.github.io/docs/java/basic/javax_valid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seoah-lab.github.io/docs/java/basic/javax_valid/</guid><description>javax @Valid # implementation &amp;#39;org.springframework.boot:spring-boot-starter-validation&amp;#39; @NotNull : The annotated element must not be null. Accepts any type.
null 을 허용하지않고 모든 타입에 사용할수 있다. &amp;quot;&amp;quot; 이나 &amp;quot; &amp;quot; 은 허용한다. @NotEmpty: The annotated element must not be null nor empty
null 과 &amp;quot;&amp;quot; 은 허용하지 않는다.
&amp;quot; &amp;quot; 은 허용
문자열, 콜랙션, 맵, 배열 타입에 활용할 수 있다.
CharSequence (length of character sequence is evaluated)
Collection (collection size is evaluated)</description></item></channel></rss>