<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevLog Test</title><link>https://seoah-lab.github.io/docs/java/</link><description>Recent content on DevLog Test</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://seoah-lab.github.io/docs/java/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://seoah-lab.github.io/docs/java/java_convert_interger_list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seoah-lab.github.io/docs/java/java_convert_interger_list/</guid><description>Convert Integer List to Int Array in Java # List 의 toArray() 메서드는 Object 타입을 지원한다. 즉 int[] 배열은 지원하지 않는다.
ArrayList toArray() # public Object[] toArray() or public &amp;lt;T&amp;gt; T[] toArray(T[] a) import java.io.*; import java.util.List; import java.util.ArrayList; class Main { public static void main(String[] args) { List&amp;lt;Integer&amp;gt; al = new ArrayList&amp;lt;Integer&amp;gt;(); al.add(10); al.add(20); al.add(30); al.add(40); Object[] objects = al.toArray(); // Printing array of objects for (Object obj : objects) System.</description></item><item><title>Java Map to Iterate</title><link>https://seoah-lab.github.io/docs/java/java_map_iterate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seoah-lab.github.io/docs/java/java_map_iterate/</guid><description>Java Map to Iterate # HashMap 의 key 와 value를 확인할때 활용할 수 있는 방법은 다음과 같다.
import java.util.Map; import java.util.HashMap; class Iteration { public static void main(String[] arg) { Map&amp;lt;String,Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); // enter name/url pair map.put(&amp;#34;sogmy&amp;#34;, 1); map.put(&amp;#34;hyunjin&amp;#34;, 2); map.put(&amp;#34;suji&amp;#34;, 3); map.put(&amp;#34;young&amp;#34;, 4); map.put(&amp;#34;ki&amp;#34;, 5); Iterator&amp;lt;Map.Entry&amp;lt;String, Interger&amp;gt;&amp;gt; itr = map.entrySet().iterator(); while(itr.hasNext()) { Map.Entry&amp;lt;String, Interger&amp;gt; entry = itr.next(); System.out.println(&amp;#34;Key = &amp;#34; + entry.getKey() + &amp;#34;, Value = &amp;#34; + entry.</description></item><item><title>Primitive type, Reference type</title><link>https://seoah-lab.github.io/docs/java/javatype/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seoah-lab.github.io/docs/java/javatype/</guid><description>Primitive type, Reference type # 1. 기본형 (Primitive) # Primitive type은 논리형, 문자형, 정수형, 실수형으로 구분된다. blooean, byte, short, int, long , float, duble, char 8가지 이다. null 이 존재하지 않는다. waper class 가 존재한다. Stack 메모리에 저장된다. 컴파일 시점에 메모리의 크기를 초과하면 에러가 발생한다. (stack over flow) 2. 참조형 (Reference type) # 기본형 타입을 제외한 타입들이 모두 참조형 타입(Reference type)이다. java.lang.Object 상속 null 이 존재하며 어떤 객체 주소도 저장되어 있지 않음을 의미한다.</description></item><item><title>Java Map Sort</title><link>https://seoah-lab.github.io/docs/java/java_map_sort/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://seoah-lab.github.io/docs/java/java_map_sort/</guid><description/></item></channel></rss>