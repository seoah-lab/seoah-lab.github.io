<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Sogmy Devlog</title><link>https://sogmy.github.io/docs/java/mordern_java_in_action/</link><description>Recent content on Sogmy Devlog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://sogmy.github.io/docs/java/mordern_java_in_action/index.xml" rel="self" type="application/rss+xml"/><item><title>Part 1. 기초</title><link>https://sogmy.github.io/docs/java/mordern_java_in_action/part1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sogmy.github.io/docs/java/mordern_java_in_action/part1/</guid><description>1 장 자바 8, 9, 10, 11 : 무슨 일이 일어나고 있는가? # 스트림 API
스트림이란? 한번에 한 개씩 만들어지는 연속적인 데이터 항목들의 모임
스트림의 특징
스레드를 직접 구현하지 않으면서도 멀티스레딩 shared mutable data 에 접근하지 않고 안전한 코드 실행 반복적인 코드 블록으로 인한 외부 반복에서 내부 반복으로 전환함 메서드에 코드르 전달하는 기법
동작의 파라미터화 (메서드를 전달함)
메서드를 일급으로 함수를 일급으로
메서드참조 (method reference)</description></item><item><title>Part5. 개선된 자바 동시성</title><link>https://sogmy.github.io/docs/java/mordern_java_in_action/part5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sogmy.github.io/docs/java/mordern_java_in_action/part5/</guid><description>개선된 자바 동시성 # 15장 CompletableFuture와 리액티브 프로그래밍 컨셉의 기초 # 동시성을 구현하는 자바의 지원의 진화
Process : 운영체제에서 연속적으로 실행되고 있는 컴퓨터 프로그램 (한 개 이상의 스레드를 갖는다.) Thread : 프로세스 내에서 실행되는 여러 흐름의 단위
스레드를 효율적으로 사용하는 것은 컴퓨팅의 효율를 향상 시킨다.
자바에서는 스트림을 이용해 스레드 사용 패턴을 추상화 하여 병렬 스레드 활용의 효율을 증대하였다.
자바의 스레드는 직접 운영체제 스레드에 접근한다. 운영체제의 스레드를 만들고 종료하려면 페이지 테이블과 과련한 상호작용을 하면서 비싼 비용을 치러야 한다.</description></item><item><title>Part2. 함수형 데이터 처리</title><link>https://sogmy.github.io/docs/java/mordern_java_in_action/part2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sogmy.github.io/docs/java/mordern_java_in_action/part2/</guid><description>Part2. 함수형 데이터 처리 # 4장 스트림 소개 # 스트림이란 무엇인가 Stream 자바 8 API 새로 추가된 기능이다.
자바 7의 코드
List&amp;lt;Dish&amp;gt; lowCaloricDishes = new ArrayList&amp;lt;&amp;gt;(); for(Dish dish: menu) { if(dish.getCalories() &amp;lt; 400) { lowCaloricDishes.add(dish); } } Collections.sort(lowCaloricdishes, new Comparator&amp;lt;Dish&amp;gt;() { // 익명 클래스로 요리 정렬 pulbic int compare(Dish dish1, Dish dish2) { return Integer.compare(dish1.getCalories(), dish2.getCalories()); } }); List&amp;lt;String&amp;gt; lowCaloricDishesName = new ArrayList(); for(DIsh dish: lowCaloricDishes) { lowCaloricDishesName.</description></item><item><title>Part3. 스트림과람다</title><link>https://sogmy.github.io/docs/java/mordern_java_in_action/part3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sogmy.github.io/docs/java/mordern_java_in_action/part3/</guid><description>Part3. 스트림과 람다를 이용한 효과적인 프로그래밍 # 8장 컬렉션 API 개선 # 컬렉션 팩토리
적은 요소를 가지고 있는 리스트를 생성
List&amp;lt;String&amp;gt; friends = Arrays.asList(&amp;#34;Rapheal&amp;#34;, &amp;#34;Olivia&amp;#34;); UnsupportedOperationException 내부적으로 고정된 크기의 변환할 수 있는 배열로 구현 되었기 때문에 발생한다.
집합을 생성
Set&amp;lt;String&amp;gt; friends = new HashSet&amp;lt;&amp;gt;(Arrays.asList(&amp;#34;Rapheael&amp;#34;, &amp;#34;Olivia&amp;#34;, &amp;#34;Thibaut&amp;#34;)); 스트림 API 로 집합을 생성
Set&amp;lt;String&amp;gt; friends = Stream.of(&amp;#34;Raphael&amp;#34;, &amp;#34;Olivia&amp;#34;, &amp;#34;THibat&amp;#34;).collect(Collectors.toSet()); 리스트 팩토리
List.of() 로 간단한 리스트 생성
ListM&amp;lt;String&amp;gt; friend = List.of(&amp;#34;Raphael&amp;#34;, &amp;#34;Olivia&amp;#34;, &amp;#34;Thibat&amp;#34;); List.</description></item></channel></rss>